@use "sass:map";
@use 'sass:color';

// Función que intercambia colores de acuerdo al valor de context.master (invertido). Se usa en el <div> padre del elemento al que se quiere aplicar
@mixin theme($property, $light-value, $dark-value) {
  #{$property}: $light-value;
  
  .invertido & {
    #{$property}: $dark-value;
  }
}

// Función que intercambia colores de acuerdo al valor de context.master (invertido). Se usa directamente en el mismo elemento al que se quiere aplicar
@mixin theme-elemento($property, $light-value, $dark-value) {
  #{$property}: $light-value;
  
  &.invertido {
    #{$property}: $dark-value;
  }
}

// Función que detecta cambio de ancho de pantalla
$breakpoints: (
  xsm: 320px,
  sm400: 400px,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px,
);
@mixin media-up($breakpoint){
    @if map.has-key($breakpoints, $breakpoint){
        @media screen and (min-width: map.get($breakpoints, $breakpoint)){
            @content
        }
    }
};
@mixin media-down($breakpoint){
    @if map.has-key($breakpoints, $breakpoint){
        @media screen and (max-width: map.get($breakpoints, $breakpoint)){
            @content
        }
    }
};

// Función que ajusta las variantes de colores (tono claro y tono oscuro)
@function light-variant($color) {
  @return color.adjust($color, $lightness: 25%);
}

@function dark-variant($color) {
  @return color.adjust($color, $lightness: -20%);
}

// función genérica para acceder a los tokens
@function token($group, $key) {
  @return map-get(map-get($tokens, $group), $key);
}

// mixin de tipografía
@mixin font-size($key) {
  font-size: token(font-size, $key);
}

// mixin de espaciado
@mixin padding-y($key) {
  padding-top: token(spacing, $key);
  padding-bottom: token(spacing, $key);
}

// mixin de sombra
@mixin shadow($key) {
  box-shadow: token(shadow, $key);
}

$tokens: (
  font-size: (
    xs: 0.7rem,
    sm: 0.75rem,
    md: 0.85rem,
    lg: 1.1rem,
    xl: 1.25rem,
    xxl: 1.5rem,
  ),
);